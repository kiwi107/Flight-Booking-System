"use client";
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './css/bootstrap.min.css'
import { createContext, useEffect, useState } from 'react'
export const AirportsContext = createContext([])
export const AuthContext = createContext<{ auth: boolean; setAuth: (auth: boolean) => void }>({ auth: false, setAuth: () => { } });





const inter = Inter({ subsets: ['latin'] })

// export const metadata: Metadata = {
//   title: 'fly-me',
//   description: 'Generated by create next app',
// }

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {

  const [airports, setAirports] = useState([]);
  const [auth, setAuth] = useState(false);


  useEffect(() => {
    const getAirports = () => {
      fetch("http://localhost:8000/airports", {
        method: "GET",
        credentials: "include", // Include cookies (JWT token)
      })
        .then((response) => response.json())
        .then((data) => {
          setAirports(data.airports);
        })
        .catch((error: Error) => {
          console.error("Error:", error);
        });
    }

    const checkToken = () => {
      fetch("http://localhost:8000/check-auth", {
        method: "GET",
        credentials: "include", // Include cookies (JWT token)
        headers: {
          "Content-Type": "application/json",
          "x-access-token": localStorage.getItem("token") || "",
        },
      })
        .then((response) => {
          if (response.status === 401) {
            localStorage.removeItem("token");
            setAuth(false);
          }
          else if (response.status === 403) {
            localStorage.removeItem("token");
            setAuth(false);
          }
          else {
            setAuth(true);
          }
        })
        .catch((error: Error) => {
          console.error("Error:", error);
        });
    }



    return () => { getAirports(), checkToken() };

  }, [])


  return (
    <AirportsContext.Provider value={airports}>
      <AuthContext.Provider value={{ auth, setAuth }}>
        <html lang="en">
          <body className={inter.className}>{children}</body>
        </html>
      </AuthContext.Provider>
    </AirportsContext.Provider>
  )
}
